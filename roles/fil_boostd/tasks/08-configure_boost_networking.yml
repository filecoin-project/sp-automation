---
# TODO(bug): This does not gracefully handle a dual stack machine. In this case, it may respond with an IPv6 address instead of IPv4.
- name: Get public IPv4 address using ifconfig.me
  ansible.builtin.command:
    cmd: "curl -4 https://ifconfig.me"
  register: boost_get_public_ip
  until: boost_get_public_ip.rc == 0
  retries: 3
  delay: 3
  when: boost_public_ip is not defined
  check_mode: false

- name: If we now have a public IPv4 address, use it
  ansible.builtin.set_fact:
    boost_public_ip: "{{ boost_get_public_ip.stdout }}"
  when: boost_public_ip is not defined and boost_get_public_ip.rc == 0

- name: Get Boost IPv4 address using inventory introspection
  ansible.builtin.set_fact:
    boost_ipv4_address: "{{ hostvars[groups['boost'][0]]['ansible_' + boost_bind_interface]['ipv4']['address'] }}"

- name: Get Boost Data IPv4 address using inventory introspection
  ansible.builtin.set_fact:
    boost_data_ipv4_address: "{{ hostvars[groups['boost_data'][0]]['ansible_' + boost_bind_interface]['ipv4']['address'] }}"

- name: Update Boost libp2p ListenAddresses
  ansible.builtin.replace:
    path: "{{ boost_path }}/config.toml"
    regexp: '\s\sListenAddresses\s=\s(.*)$'
    replace: '  ListenAddresses = ["/ip4/{{ boost_ipv4_address }}/tcp/{{ boost_libp2p_port }}"]'
    after: '\[Libp2p\]'
    before: '\[Pubsub\]'

- name: Update Boost libp2p AnnounceAddresses
  ansible.builtin.replace:
    path: "{{ boost_path }}/config.toml"
    regexp: '\s\sAnnounceAddresses(.*)$'
    replace: '  AnnounceAddresses = ["/ip4/{{ boost_public_ip }}/tcp/{{ boost_libp2p_port }}"]'
    after: '\[Libp2p\]'
    before: '\[Pubsub\]'

- name: Update Boost ServiceApiInfo
  ansible.builtin.replace:
    path: "{{ boost_path }}/config.toml"
    regexp: '\s\sServiceApiInfo(.*)$'
    replace: '  ServiceApiInfo = "ws://{{ boost_data_ipv4_address }}:8044"'
    after: '\[LocalIndexDirectory\]'
    before: '\[ContractDeals\]'
