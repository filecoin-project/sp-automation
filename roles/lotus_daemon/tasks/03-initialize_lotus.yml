---
- name: Read Lotus API token from file
  ansible.builtin.command:
    cmd: "cat {{ lotus_api_token_file }}"
  register: read_lotus_api_token
  become_user: "{{ lotus_user }}"
  become: true
  changed_when: false
  ignore_errors: true
  when: lotus_api_token_file is defined

- name: If we successfully read a token, flatten the fact
  ansible.builtin.set_fact:
    lotus_api_token: "{{ read_lotus_api_token.stdout }}"
  when: read_lotus_api_token != "" and read_lotus_api_token.rc == 0

- name: Create API token if we don't have one or if we have an invalid one
  # We run all these tasks if we are unable to find a seemingly valid API token.
  when:
    - read_lotus_api_token.rc != 0 or
      lotus_api_token is not defined or
      lotus_api_token == "" or
      lotus_api_token == "null" or
      lotus_api_token == "undefined"
  block:
    - name: Create API token
      ansible.builtin.shell:
        cmd: "set -o pipefail ; lotus auth api-info --perm admin | cut -d':' -f1 | cut -d'=' -f2"
        executable: /bin/bash
      environment:
        LOTUS_PATH: "{{ lotus_path }}"
      register: new_api_token
      become_user: "{{ lotus_user }}"
      become: true

    - name: Store API token as a variable if we retrieved it successfully
      ansible.builtin.set_fact:
        lotus_api_token: "{{ new_api_token.stdout }}"
      when: 
        - new_api_token is defined
        - new_api_token.stdout | length > 0
        - new_api_token.rc == 0

    - name: Write API token to file if we retrieved it successfully
      ansible.builtin.copy:
        content: "{{ lotus_api_token }}"
        dest: "{{ lotus_api_token_file }}"
        owner: "{{ lotus_user }}"
        group: "{{ lotus_group }}"
        mode: '0400'
      when: 
        - lotus_api_token != ""

    # Re-read the Lotus API token now that we have created it
    - name: Read Lotus API token from file
      ansible.builtin.command:
        cmd: "cat {{ lotus_api_token_file }}"
      register: lotus_api_token
      become_user: "{{ lotus_user }}"
      become: true
      changed_when: false
      ignore_errors: true
      when: lotus_api_token_file is defined

- name: Get public IPv4 address using ifconfig.me
  ansible.builtin.command:
    cmd: "curl -4 https://ifconfig.me"
  register: public_ipv4
  until: public_ipv4.rc == 0
  retries: 3
  delay: 3
  when: lotus_public_ip is not defined
  changed_when: false

- name: If we now have a public IPv4 address, use it
  ansible.builtin.set_fact:
    lotus_public_ip: "{{ public_ipv4.stdout }}"
  when: lotus_public_ip is not defined and public_ipv4.rc == 0

- name: Configure Lotus
  ansible.builtin.template:
    src: lotus-config.toml.j2
    dest: "{{ lotus_path }}/config.toml"
    owner: "{{ lotus_user }}"
    group: "{{ lotus_group }}"
    backup: true
    mode: 0600
  notify: Restart Lotus daemon

- name: Flush handlers to ensure Lotus is restarted if needed
  ansible.builtin.meta: flush_handlers

- name: Set fullnode_api_info in .bashrc
  ansible.builtin.lineinfile:
    path: "{{ lotus_user_details.home }}/.bashrc"
    line: "export FULLNODE_API_INFO=$(cat {{ lotus_api_token_file }}):/ip4/{{ hostvars[groups['lotus_primary'][0]]['ansible_' + lotusd_bind_interface]['ipv4']['address'] }}/tcp/{{ lotus_daemon_port }}"
    state: present
    create: true
    owner: "{{ lotus_user }}"
    group: "{{ lotus_user }}"
    mode: 0644
    # TODO(decision) We probably want MINER_API_INFO to only be available to interactive shells.
    # If we change our mind on that later, uncomment the following line.
    #insertbefore: "# If not running interactively, don't do anything"
  when: lotus_api_token is defined
