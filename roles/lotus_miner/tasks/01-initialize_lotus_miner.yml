---
# transfer_funds
# wait_for_funds
# initialize_sp ${SECTOR_SIZE}
# configure_miner ${MINER_IP} ${MINER_PORT} ${LOTUS_MINER_PATH}
# start_miner ${LOG_DIR}
# #stop_miner
# #start_miner ${LOG_DIR}
# wait_for_miner ${LOG_DIR}

- name: Create parameter cache directory
  ansible.builtin.file:
    path: "{{ param_cache }}"
    state: directory
    owner: "{{ lotus_user }}"
    group: "{{ lotus_group }}"
    mode: '0755'

- name: Create parent cache directory
  ansible.builtin.file:
    path: "{{ parent_cache }}"
    state: directory
    owner: "{{ lotus_user }}"
    group: "{{ lotus_group }}"
    mode: '0755'

- name: Ensure Ansible facts directory exists
  ansible.builtin.file:
    path: "/etc/ansible/facts.d"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: List existing wallets
  ansible.builtin.shell: "export LOTUS_PATH={{ lotus_path }} ; lotus wallet list"
  register: wallet_list
  become_user: "{{ lotus_user }}"
  become: true
  changed_when: false

- name: If either wallet fact exists, check that all wallet facts exist
  ansible.builtin.assert:
    that:
      - ansible_local.owner_wallet_address.wallet.address is defined
      - ansible_local.worker_wallet_address.wallet.address is defined
  when:
    ansible_local.owner_wallet_address.wallet.address is defined is defined or 
    ansible_local.worker_wallet_address.wallet.address is defined

- name: If the wallet list is empty, set number_of_wallets to zero
  ansible.builtin.set_fact:
    number_of_wallets: 0
  when: wallet_list.stdout == ""

- name: If the wallet list is not empty, set number_of_wallets to the number of wallets in the list
  ansible.builtin.set_fact:
    number_of_wallets: "{{ wallet_list.stdout_lines[1:] | select('search', 'FIL') | list | length }}"
  when: wallet_list.stdout != ""

- name: If the owner wallet does not exist yet, create it.
  ansible.builtin.shell: "export LOTUS_PATH={{ lotus_path }} ; lotus wallet new bls"
  become_user: "{{ lotus_user }}"
  become: true
  register: create_owner_wallet
  changed_when: create_owner_wallet.rc == 0
  when: number_of_wallets == 0

- name: If the worker wallet does not exist yet, create it.
  ansible.builtin.shell: "export LOTUS_PATH={{ lotus_path }} ; lotus wallet new bls"
  become_user: "{{ lotus_user }}"
  become: true
  register: create_worker_wallet
  changed_when: create_owner_wallet.rc == 0
  # This when conditional is a little silly, but it should work consistently. We always want to create this second wallet if we create the first one.
  when: number_of_wallets == 1 or number_of_wallets == 0

- name: List existing wallets again if we created any
  ansible.builtin.shell: "export LOTUS_PATH={{ lotus_path }} ; lotus wallet list"
  register: wallet_list
  become_user: "{{ lotus_user }}"
  become: true
  changed_when: false
  # We use the same conditional here, as at this point in the run number_of_wallets hasn't technically changed.
  when: number_of_wallets == 0 or number_of_wallets == 1

- name: Set the addresses for the owner and worker wallets
  ansible.builtin.set_fact:
    owner_wallet_address: "{{ wallet_list.stdout_lines[1].split(' ')[0] }}"
    worker_wallet_address: "{{ wallet_list.stdout_lines[2].split(' ')[0] }}"

- name: Print owner and worker wallet addresses
  ansible.builtin.debug:
    msg:
      - "Owner wallet address: {{ owner_wallet_address }}"
      - "Worker wallet address: {{ worker_wallet_address }}"
  when: owner_wallet_address is defined and worker_wallet_address is defined

- name: Prompt the user to transfer funds
  ansible.builtin.include_tasks: 01a-transfer_funds.yml

# Now that we have funds, we can initialise our SP
- name: Check whether we need to initialise our SP
  ansible.builtin.shell:
    cmd: "export LOTUS_PATH={{ lotus_path }} ; lotus-miner --miner-repo {{ lotus_miner_path }} info"
  register: miner_info
  become_user: "{{ lotus_user }}"
  become: true
  failed_when: false
  changed_when: false
  ignore_errors: true

- name: Print the output of the miner info command
  ansible.builtin.debug:
    msg: "{{ miner_info.stderr_lines }}"
  when: miner_info.stderr_lines is defined

- name: Initialize our SP
  ansible.builtin.include_tasks: 01b-initialize_sp.yml
  when: "miner_info.stderr_lines[0] == 'ERROR: could not get API info for StorageMiner: repo directory does not exist. Make sure your configuration is correct'"

# Now that we have an SP, we can configure our miner
- name: Install initial miner configuration
  ansible.builtin.template:
    src: lotus-miner.toml.j2
    dest: "{{ lotus_miner_path }}/config.toml"
    owner: "{{ lotus_user }}"
    group: "{{ lotus_group }}"
    mode: '0644'
    backup: true
  notify:
    - Restart Lotus miner